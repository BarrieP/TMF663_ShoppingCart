{
    "swagger": "2.0", 
    "info": {
        "title": "Shopping Cart Management", 
        "description": "This is Swagger UI environment generated for the TMF Shopping Cart Management specification", 
        "version": "2.0"
    }, 
    "host": "biologeek.orange-labs.fr", 
    "basePath": "/tmf-api/shoppingCartManagement/v2/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json"
    ], 
    "produces": [
        "application/json"
    ], 
    "paths": {
        "/shoppingCart": {
            "get": {
                "operationId": "listShoppingCart", 
                "summary": "List or find 'ShoppingCart' objects", 
                "tags": [
                    "shoppingCart"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma separated properties to display in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }, 
                    {
                        "format": "date-time", 
                        "in": "query", 
                        "type": "string", 
                        "name": "validFor.endDateTime", 
                        "description": "For filtering on the base of 'endDateTime' field (equality)"
                    }, 
                    {
                        "name": "validFor.endDateTime.gt", 
                        "description": "For filtering on the base of 'endDateTime' field (great than)", 
                        "type": "string", 
                        "format": "date-time", 
                        "in": "query"
                    }, 
                    {
                        "name": "validFor.endDateTime.lt", 
                        "description": "For filtering on the base of 'endDateTime' field (less than)", 
                        "type": "string", 
                        "format": "date-time", 
                        "in": "query"
                    }, 
                    {
                        "format": "date-time", 
                        "in": "query", 
                        "type": "string", 
                        "name": "validFor.startDateTime", 
                        "description": "For filtering on the base of 'startDateTime' field (equality)"
                    }, 
                    {
                        "name": "validFor.startDateTime.gt", 
                        "description": "For filtering on the base of 'startDateTime' field (great than)", 
                        "type": "string", 
                        "format": "date-time", 
                        "in": "query"
                    }, 
                    {
                        "name": "validFor.startDateTime.lt", 
                        "description": "For filtering on the base of 'startDateTime' field (less than)", 
                        "type": "string", 
                        "format": "date-time", 
                        "in": "query"
                    }, 
                    {
                        "in": "query", 
                        "type": "boolean", 
                        "name": "contactMedium.preferred", 
                        "description": "For filtering on the base of 'preferred' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "contactMedium.type", 
                        "description": "For filtering on the base of 'type' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "cartTotalPrice.name", 
                        "description": "For filtering on the base of 'name' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "cartTotalPrice.priceType", 
                        "description": "For filtering on the base of 'priceType' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "cartTotalPrice.recurringChargePeriod", 
                        "description": "For filtering on the base of 'recurringChargePeriod' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "cartTotalPrice.unitOfMeasure", 
                        "description": "For filtering on the base of 'unitOfMeasure' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "cartItem.action", 
                        "description": "For filtering on the base of 'action' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "integer", 
                        "name": "cartItem.quantity", 
                        "description": "For filtering on the base of 'quantity' field (equality)"
                    }, 
                    {
                        "name": "cartItem.quantity.gt", 
                        "description": "For filtering on the base of 'quantity' field (great than)", 
                        "type": "integer", 
                        "in": "query"
                    }, 
                    {
                        "name": "cartItem.quantity.lt", 
                        "description": "For filtering on the base of 'quantity' field (less than)", 
                        "type": "integer", 
                        "in": "query"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "cartItem.status", 
                        "description": "For filtering on the base of 'status' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "relatedParty.@referredType", 
                        "description": "For filtering on the base of '@referredType' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "relatedParty.name", 
                        "description": "For filtering on the base of 'name' field (equality)"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "name": "relatedParty.role", 
                        "description": "For filtering on the base of 'role' field (equality)"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ShoppingCart"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createShoppingCart", 
                "summary": "Creates a 'ShoppingCart'", 
                "tags": [
                    "shoppingCart"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ShoppingCart_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "shoppingCart", 
                        "description": "The Shopping Cart to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ShoppingCart"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/shoppingCart/{id}": {
            "get": {
                "operationId": "retrieveShoppingCart", 
                "summary": "Retrieves a 'ShoppingCart' by Id", 
                "tags": [
                    "shoppingCart"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Shopping Cart"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ShoppingCart"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchShoppingCart", 
                "summary": "Updates partially a 'ShoppingCart' by Id", 
                "tags": [
                    "shoppingCart"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Shopping Cart"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ShoppingCart_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "shoppingCart", 
                        "description": "The Shopping Cart to be updated"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ShoppingCart"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteShoppingCart", 
                "summary": "Deletes a 'ShoppingCart' by Id", 
                "tags": [
                    "shoppingCart"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Shopping Cart"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Unsubscribed"
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "ShoppingCart": {
            "type": "object", 
            "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the shopping cart"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier created on provider side (e.g. Order Capture system)"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
                }, 
                "contactMedium": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                }, 
                "cartTotalPrice": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartPrice"
                    }
                }, 
                "cartItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartItem"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ShoppingCart_Create": {
            "type": "object", 
            "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions\nSkipped properties: id,href", 
            "required": [
                "cartItem"
            ], 
            "properties": {
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
                }, 
                "contactMedium": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                }, 
                "cartTotalPrice": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartPrice"
                    }
                }, 
                "cartItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartItem"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ShoppingCart_Update": {
            "type": "object", 
            "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions\nSkipped properties: id,href,id,href,validFor,cartTotalPrice", 
            "properties": {
                "contactMedium": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ContactMedium"
                    }
                }, 
                "cartItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartItem"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "TimePeriod": {
            "type": "object", 
            "description": "A base / value business entity used to represent a period of time between two timepoints.", 
            "properties": {
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "An instant of time, ending at the TimePeriod."
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "An instant of time, starting at the TimePeriod"
                }
            }
        }, 
        "ContactMedium": {
            "type": "object", 
            "description": "Indicates the contact medium that could be used to contact the party.", 
            "properties": {
                "preferred": {
                    "type": "boolean", 
                    "description": "If true, indicates that is the preferred contact medium"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the contact medium, such as: email address, telephone number, postal address"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The time period that the contact medium is valid for"
                }, 
                "characteristic": {
                    "$ref": "#/definitions/MediumCharacteristic"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "CartPrice": {
            "type": "object", 
            "description": "An amount, usually of money, that represents the actual price paid by the customer for this item. May represent the total price of the shopping cart or the total of the cart item depending on the relation", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail the semantics of this order item price."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A short descriptive name such as \"Subscription price\"."
                }, 
                "priceType": {
                    "type": "string", 
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth"
                }, 
                "recurringChargePeriod": {
                    "type": "string", 
                    "description": "Could be month, week..."
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "Could be minutes, GB..."
                }, 
                "price": {
                    "$ref": "#/definitions/Price"
                }, 
                "priceAlteration": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/PriceAlteration"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "CartItem": {
            "type": "object", 
            "description": "An identified part of the shopping cart. A shopping cart  is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options", 
            "properties": {
                "action": {
                    "type": "string", 
                    "description": "Can be \"add\" / \"modify\" / \"no_change\"/ \"delete\""
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of the cart item (generally it is a sequence number 01, 02, 03, ...) in the shopping cart"
                }, 
                "quantity": {
                    "type": "integer", 
                    "description": "Quantity of cart items"
                }, 
                "status": {
                    "type": "string", 
                    "description": "status of cart item. e.g \"Active\" , \"SavedForLater\"."
                }, 
                "cartTerm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartTerm"
                    }
                }, 
                "cartItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartItem"
                    }
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                }, 
                "totalItemPrice": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartPrice"
                    }
                }, 
                "product": {
                    "$ref": "#/definitions/Product"
                }, 
                "itemPrice": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartPrice"
                    }
                }, 
                "productOffering": {
                    "$ref": "#/definitions/ProductOfferingRef"
                }, 
                "cartItemRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartItemRelationship"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "RelatedPartyRef": {
            "type": "object", 
            "description": "relatedParty (RelatedPartyRef). The party which the recommendation is related with.", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Hypertext Reference of the related party."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of related party"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the related party."
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the related party."
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "MediumCharacteristic": {
            "type": "object", 
            "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)", 
            "properties": {
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "city": {
                    "type": "string", 
                    "description": "The city"
                }, 
                "country": {
                    "type": "string", 
                    "description": "The country"
                }, 
                "emailAddress": {
                    "type": "string", 
                    "description": "Full email address in standard format"
                }, 
                "faxNumber": {
                    "type": "string", 
                    "description": "The fax number of the contact"
                }, 
                "phoneNumber": {
                    "type": "string", 
                    "description": "The primary phone number of the contact"
                }, 
                "postCode": {
                    "type": "string", 
                    "description": "Postcode"
                }, 
                "stateOrProvince": {
                    "type": "string", 
                    "description": "State or province"
                }, 
                "street1": {
                    "type": "string", 
                    "description": "Describes the street"
                }, 
                "street2": {
                    "type": "string", 
                    "description": "Complementary street description"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of medium (fax, mobile phone...)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "Price": {
            "type": "object", 
            "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.", 
            "properties": {
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "dutyFreeAmount": {
                    "$ref": "#/definitions/Money", 
                    "description": "All taxes excluded amount (expressed in the given currency)"
                }, 
                "percentage": {
                    "type": "number", 
                    "format": "float", 
                    "description": "Percentage to apply for ProdOfferPriceAlteration"
                }, 
                "taxIncludedAmount": {
                    "$ref": "#/definitions/Money", 
                    "description": "All taxes included amount (expressed in the given currency)"
                }, 
                "taxRate": {
                    "type": "number", 
                    "format": "float", 
                    "description": "Tax rate"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "PriceAlteration": {
            "type": "object", 
            "description": "Is an amount, usually of money, that modifies the price charged for an order item.", 
            "properties": {
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "applicationDuration": {
                    "type": "integer", 
                    "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail the semantics of this order item price alteration"
                }, 
                "name": {
                    "type": "string", 
                    "description": "A short descriptive name such as \"Monthly discount\""
                }, 
                "priceType": {
                    "type": "string", 
                    "description": "A category that describes the price such as recurring, one time and usage."
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
                }, 
                "recurringChargePeriod": {
                    "type": "string", 
                    "description": "Could be month, week..."
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "Could be minutes, GB..."
                }, 
                "price": {
                    "$ref": "#/definitions/Price"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "Money": {
            "type": "object", 
            "description": "A base / value business entity used to represent money", 
            "properties": {
                "unit": {
                    "type": "string", 
                    "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
                }, 
                "value": {
                    "type": "number", 
                    "format": "float", 
                    "description": "A positive floating point number"
                }
            }
        }, 
        "CartTerm": {
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string"
                }, 
                "duration": {
                    "$ref": "#/definitions/Quantity"
                }, 
                "name": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "Note": {
            "type": "object", 
            "description": "Extra information about a given entity", 
            "properties": {
                "author": {
                    "type": "string", 
                    "description": "Author of the note"
                }, 
                "date": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date of the note"
                }, 
                "text": {
                    "type": "string", 
                    "description": "Text of the note"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "Product": {
            "type": "object", 
            "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Is the description of the product. It could be copied from the description of the Product Offering."
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the product"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the product"
                }, 
                "isBundle": {
                    "type": "boolean", 
                    "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
                }, 
                "isCustomerVisible": {
                    "type": "boolean", 
                    "description": "If true, the product is visible by the customer."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the product. It could be the same as the name of the product offering"
                }, 
                "orderDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Is the date when the product was ordered"
                }, 
                "productSerialNumber": {
                    "type": "string", 
                    "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Is the date from which the product starts"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Is the lifecycle status of the product."
                }, 
                "terminationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Is the date when the product was terminated"
                }, 
                "realizingService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RealizingServiceRef"
                    }
                }, 
                "billingAccount": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/BillingAccountRef"
                    }
                }, 
                "productOffering": {
                    "$ref": "#/definitions/ProductOfferingRef"
                }, 
                "agreement": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ProductCharacteristic"
                    }
                }, 
                "productRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ProductRelationship"
                    }
                }, 
                "realizingResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RealizingResourceRef"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "productPrice": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ProductPrice"
                    }
                }, 
                "productSpecification": {
                    "$ref": "#/definitions/ProductSpecificationRef"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ProductOfferingRef": {
            "type": "object", 
            "description": "ProductOfferingRef (ProductOfferingRef)Recommended Product offering", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Hypertext Reference of the product offering."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of product offering"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the product offering."
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "CartItemRelationship": {
            "type": "object", 
            "description": "Relationship among cart items mainly other than hierarchical relationships such as \"RelyOn\", \"DependentOn\", \"Shipping\" etc.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the referred cart item"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the cart item relationship"
                }, 
                "cartItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/CartItemRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "Quantity": {
            "type": "object", 
            "properties": {
                "amount": {
                    "type": "number", 
                    "format": "float"
                }, 
                "units": {
                    "type": "string"
                }
            }
        }, 
        "Place": {
            "type": "object", 
            "properties": {
                "@referredType": {
                    "type": "string"
                }, 
                "href": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "role": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ProductRelationship": {
            "type": "object", 
            "description": "Represents a relationship between products - which potentially holds an entire product object or a product reference (with partial content)", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Type of the product relationship. It can be :\n<ul>\n <li>\"bundled\" if the product is a bundle and you want to describe the \"bundled\" products inside this bundle</li>\n <li>\"reliesOn\" if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)</li>\n</ul>\n\"targets\" or \"isTargeted\" (depending on the way of expressing the link) for any other kind of links that may be useful"
                }, 
                "product": {
                    "$ref": "#/definitions/Product"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ProductCharacteristic": {
            "type": "object", 
            "description": "Characteristics of the product to instantiate or to modify", 
            "properties": {
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the characteristic"
                }, 
                "value": {
                    "type": "string", 
                    "description": "Value of the characteristic"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ProductSpecificationRef": {
            "type": "object", 
            "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Reference of the product specification"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the product specification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the product specification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of the product specification"
                }, 
                "targetResourceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema"
                }, 
                "describing": {
                    "$ref": "#/definitions/ProductSpecificationSchemaRef"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "TargetServiceSchema": {
            "type": "object", 
            "properties": {
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ProductSpecificationSchemaRef": {
            "type": "object", 
            "description": "ProductSpecification description could be done with schema use. This information allows to retrieve schema type and location", 
            "properties": {
                "@schemaLocation": {
                    "type": "string", 
                    "description": "URL to get to the schema description file."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "Indicates the type of resource. Here it will be a product specification"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "CartItemRef": {
            "type": "object", 
            "description": "CartIIem reference. A CartItem is an identified part of the shopping cart.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the cart item"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "properties": {
                "code": {
                    "type": "integer", 
                    "description": "Application related code."
                }, 
                "reason": {
                    "type": "integer", 
                    "description": "Text that explains the reason for error."
                }, 
                "message": {
                    "type": "string", 
                    "description": "(optional) Text that provide more details and corrective actions related to the error."
                }, 
                "status": {
                    "type": "integer", 
                    "description": "(optional) http error code extension like 400-2"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "(optional) A URL to online documentation that provides more information about the error."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "(optional) The class type of a REST resource."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "(optional) A link to the schema describing a REST resource."
                }
            }
        }
    }
}